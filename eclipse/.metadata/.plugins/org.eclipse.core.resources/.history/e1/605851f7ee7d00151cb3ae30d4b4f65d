package com.sythiex.outerplanes.elysium.amoria.layer;

import net.minecraft.world.WorldType;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.GenLayerAddIsland;
import net.minecraft.world.gen.layer.GenLayerAddMushroomIsland;
import net.minecraft.world.gen.layer.GenLayerAddSnow;
import net.minecraft.world.gen.layer.GenLayerBiome;
import net.minecraft.world.gen.layer.GenLayerBiomeEdge;
import net.minecraft.world.gen.layer.GenLayerDeepOcean;
import net.minecraft.world.gen.layer.GenLayerEdge;
import net.minecraft.world.gen.layer.GenLayerFuzzyZoom;
import net.minecraft.world.gen.layer.GenLayerHills;
import net.minecraft.world.gen.layer.GenLayerIsland;
import net.minecraft.world.gen.layer.GenLayerRareBiome;
import net.minecraft.world.gen.layer.GenLayerRemoveTooMuchOcean;
import net.minecraft.world.gen.layer.GenLayerRiver;
import net.minecraft.world.gen.layer.GenLayerRiverInit;
import net.minecraft.world.gen.layer.GenLayerRiverMix;
import net.minecraft.world.gen.layer.GenLayerShore;
import net.minecraft.world.gen.layer.GenLayerSmooth;
import net.minecraft.world.gen.layer.GenLayerVoronoiZoom;
import net.minecraft.world.gen.layer.GenLayerZoom;

public abstract class GenLayerAmoria extends GenLayer
{
	public GenLayerAmoria(long par1)
	{
		super(par1);
	}
	
	public static GenLayer[] initializeAllBiomeGenerators(long seed, WorldType worldType)
	{
		boolean flag = false;
		GenLayerIsland genlayerisland = new GenLayerIsland(1L);
		GenLayerFuzzyZoom genlayerfuzzyzoom = new GenLayerFuzzyZoom(2000L, genlayerisland);
		GenLayerAddIsland genlayeraddisland = new GenLayerAddIsland(1L, genlayerfuzzyzoom);
		GenLayerZoom genlayerzoom = new GenLayerZoom(2001L, genlayeraddisland);
		genlayeraddisland = new GenLayerAddIsland(2L, genlayerzoom);
		genlayeraddisland = new GenLayerAddIsland(50L, genlayeraddisland);
		genlayeraddisland = new GenLayerAddIsland(70L, genlayeraddisland);		
		GenLayerRemoveTooMuchOcean genlayerremovetoomuchocean = new GenLayerRemoveTooMuchOcean(2L, genlayeraddisland);
		GenLayerAddSnow genlayeraddsnow = new GenLayerAddSnow(2L, genlayerremovetoomuchocean);
		genlayeraddisland = new GenLayerAddIsland(3L, genlayeraddsnow);
		GenLayerEdge genlayeredge = new GenLayerEdge(2L, genlayeraddisland, GenLayerEdge.Mode.COOL_WARM);
		genlayeredge = new GenLayerEdge(2L, genlayeredge, GenLayerEdge.Mode.HEAT_ICE);
		genlayeredge = new GenLayerEdge(3L, genlayeredge, GenLayerEdge.Mode.SPECIAL);
		genlayerzoom = new GenLayerZoom(2002L, genlayeredge);
		genlayerzoom = new GenLayerZoom(2003L, genlayerzoom);
		genlayeraddisland = new GenLayerAddIsland(4L, genlayerzoom);
		GenLayerAddMushroomIsland genlayeraddmushroomisland = new GenLayerAddMushroomIsland(5L, genlayeraddisland);
		GenLayerDeepOcean genlayerdeepocean = new GenLayerDeepOcean(4L, genlayeraddmushroomisland);
		GenLayer genlayer2 = GenLayerZoom.magnify(1000L, genlayerdeepocean, 0);
		byte b0 = 4;
		
		if(flag)
		{
			b0 = 4;
		}
		b0 = getModdedBiomeSize(worldType, b0);
		
		GenLayer genlayer = GenLayerZoom.magnify(1000L, genlayer2, 0);
		GenLayerRiverInit genlayerriverinit = new GenLayerRiverInit(100L, genlayer);
		Object object = getBiomeLayer(seed, genlayer2); // new GenLayerBiomesAmoria(seed, genlayer2);
		
		GenLayer genlayer1 = GenLayerZoom.magnify(1000L, genlayerriverinit, 2);
		GenLayerHills genlayerhills = new GenLayerHills(1000L, (GenLayer) object, genlayer1);
		genlayer = GenLayerZoom.magnify(1000L, genlayerriverinit, 2);
		genlayer = GenLayerZoom.magnify(1000L, genlayer, b0);
		GenLayerRiver genlayerriver = new GenLayerRiver(1L, genlayer);
		GenLayerSmooth genlayersmooth = new GenLayerSmooth(1000L, genlayerriver);
		object = new GenLayerRareBiome(1001L, genlayerhills);
		
		for(int j = 0; j < b0 + 2; ++j)
		{
			object = new GenLayerZoom((long) (1000 + j), (GenLayer) object);
			
			if(j == 0)
			{
				object = new GenLayerAddIsland(3L, (GenLayer) object);
			}
			
			if(j == 1)
			{
				object = new GenLayerShore(1000L, (GenLayer) object);
			}
		}
		
		GenLayerSmooth genlayersmooth1 = new GenLayerSmooth(1000L, (GenLayer) object);
		GenLayerRiverMix genlayerrivermix = new GenLayerRiverMix(100L, genlayersmooth1, genlayersmooth);
		GenLayerVoronoiZoom genlayervoronoizoom = new GenLayerVoronoiZoom(10L, genlayerrivermix);
		genlayerrivermix.initWorldGenSeed(seed);
		genlayervoronoizoom.initWorldGenSeed(seed);
		return new GenLayer[] { genlayerrivermix, genlayervoronoizoom, genlayerrivermix };
	}
	
	/**
	 * (Copied from WorldType)
	 * Creates the GenLayerBiome used for generating the world
	 *
	 * @param worldSeed
	 *            The world seed
	 * @param parentLayer
	 *            The parent layer to feed into any layer you return
	 * @return A GenLayer that will return ints representing the Biomes to be generated, see GenLayerBiomesAmoria
	 */
	public static GenLayer getBiomeLayer(long seed, GenLayer parentLayer)
	{
		GenLayer ret = new GenLayerBiomesAmoria(200L, parentLayer, null);
		ret = GenLayerZoom.magnify(1000L, ret, 2);
		ret = new GenLayerBiomeEdge(1000L, ret);
		return ret;
	}
}

/*
 * public class GenLayerElysiumAmoria extends GenLayer
 * {
 * public GenLayerElysiumAmoria(long seed)
 * {
 * super(seed);
 * }
 * 
 * public static GenLayer[] makeTheWorld(long seed, WorldType type)
 * {
 * GenLayer biomes = new GenLayerBiomesElysiumAmoria(1L);
 * biomes = new GenLayerZoom(1000L, biomes);
 * biomes = new GenLayerZoom(1001L, biomes);
 * biomes = new GenLayerZoom(1002L, biomes);
 * biomes = new GenLayerZoom(1003L, biomes);
 * biomes = new GenLayerZoom(1004L, biomes);
 * biomes = new GenLayerZoom(1005L, biomes);
 * GenLayer genlayervoronoizoom = new GenLayerVoronoiZoom(10L, biomes);
 * biomes.initWorldGenSeed(seed);
 * genlayervoronoizoom.initWorldGenSeed(seed);
 * return new GenLayer[] { biomes, genlayervoronoizoom };
 * }
 * 
 * @Override
 * public int[] getInts(int p_75904_1_, int p_75904_2_, int p_75904_3_, int p_75904_4_)
 * {
 * return null;
 * }
 * }
 */