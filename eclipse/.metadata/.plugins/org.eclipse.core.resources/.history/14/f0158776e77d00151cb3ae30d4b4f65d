package com.sythiex.outerplanes.elysium.amoria;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.sythiex.outerplanes.OuterPlanes;

import cpw.mods.fml.common.IWorldGenerator;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;
import net.minecraft.world.World;
import net.minecraft.world.chunk.IChunkProvider;

public class GeneratorElysiumAmoria implements IWorldGenerator
{
	/** stores x chunk coords for Eronia portals */
	private final List portalCoordsEroniaX = new ArrayList();
	/** stores y chunk coords for Eronia portals */
	private final List portalCoordsEroniaZ = new ArrayList();
	
	@Override
	public void generate(Random rand, int chunkX, int chunkZ, World world, IChunkProvider chunkGenerator, IChunkProvider chunkProvider)
	{
		if(world.provider.dimensionId == OuterPlanes.dimAmoriaID)
		{
			generateWaterPortal(world, rand, chunkX, chunkZ);
		}
	}
	
	private void generateWaterPortal(World world, Random rand, int chunkX, int chunkZ)
	{
		int x = (chunkX * 16) + rand.nextInt(16);
		int z = (chunkZ * 16) + rand.nextInt(16);
		
		if(world.getBiomeGenForCoords(x, z) == OuterPlanes.biomeOceanus && rand.nextInt(20) == 0)
		{
			boolean flag = false;
			
			for(int i = -8; i <= 8; i++)
			{
				for(int k = -8; k <= 8; k++)
				{
					if(portalCoordsEroniaX.contains(chunkX + i) || portalCoordsEroniaZ.contains(chunkZ + k))
						flag = true;
				}
			}
			
			int y = getTopBlockY(world, x, z);
			if(world.getBlock(x, y, z) == Blocks.water)
			{
				// checks area for obstructions
				for(int i = -4; i <= 4; i++)
				{
					for(int k = -4; k <= 4; k++)
					{
						if(world.getBlock(x + i, y, z + k) != Blocks.water)
							flag = true;
					}
				}
				
				if(!flag)
				{
					int minY = y - (rand.nextInt(23) + 1);
					
					portalCoordsEroniaX.add(chunkX);
					portalCoordsEroniaZ.add(chunkZ);
					
					System.out.println("generating Amoria-Eronia portal at " + x + ", " + minY + ", " + z);
					System.out.println("portalCoordsEroniaX: " + portalCoordsEroniaX);
					System.out.println("portalCoordsEroniaZ: " + portalCoordsEroniaZ);

					// fills area with stone
					for(int j = y; j >= minY + 1; j--)
					{
						for(int k = -3; k <= 3; k++)
						{
							for(int i = -3; i <= 3; i++)
							{
								world.setBlock(x + i, j, z + k, Blocks.stone, 0, 3);
							}
						}
					}
					
					// places portal blocks
					for(int k = -1; k <= 1; k++)
					{
						for(int i = -1; i <= 1; i++)
						{
							world.setBlock(x + i, minY, z + k, Blocks.diamond_block, 0, 3);
						}
					}
					
					// places portal frame blocks
					for(int k = -3; k <= 3; k++)
					{
						for(int i = -3; i <= 3; i++)
						{
							if(Math.abs(k) >= 2 || Math.abs(i) >= 2)
							{
								world.setBlock(x + i, minY, z + k, Blocks.stonebrick, 0, 3);
							}
							if(Math.abs(k) > 2 || Math.abs(i) > 2)
							{
								world.setBlock(x + i, minY + 1, z + k, Blocks.stonebrick, 0, 3);
							}
						}
					}
					
					// clears remaining stone
					for(int k = -2; k <= 2; k++)
					{
						for(int i = -2; i <= 2; i++)
						{
							world.setBlock(x + i, minY + 1, z + k, Blocks.air, 0, 3);
						}
					}
					for(int j = minY + 2; j <= y; j++)
					{
						for(int k = -3; k <= 3; k++)
						{
							for(int i = -3; i <= 3; i++)
							{
								world.setBlock(x + i, j, z + k, Blocks.air, 0, 3);
							}
						}
					}
				}
			}
		}
	}
	
	/**
	 * returns the y coordinate of the highest block at the given x and z coordinates
	 * 
	 * @param world
	 * @param x
	 * @param z
	 * @return y
	 */
	private int getTopBlockY(World world, int x, int z)
	{
		int y = 256;
		
		while((!world.getBlock(x, y, z).getMaterial().blocksMovement() || (world.getBlock(x, y, z).getMaterial() == Material.leaves) || world.getBlock(x, y, z).isFoliage(world, x, y, z)) && !world.getBlock(x, y, z).getMaterial().isLiquid())
		{
			--y;
		}
		return y;
	}
}
