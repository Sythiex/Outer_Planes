package com.sythiex.outerplanes.elysium.amoria;

import java.util.Random;

import com.sythiex.outerplanes.OuterPlanes;

import cpw.mods.fml.common.IWorldGenerator;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;
import net.minecraft.world.World;
import net.minecraft.world.chunk.IChunkProvider;

public class GeneratorElysiumAmoria implements IWorldGenerator
{
	@Override
	public void generate(Random rand, int chunkX, int chunkZ, World world, IChunkProvider chunkGenerator, IChunkProvider chunkProvider)
	{
		if(world.provider.dimensionId == OuterPlanes.dimAmoriaID)
		{
			generateWaterPortal(world, rand, (chunkX * 16) + rand.nextInt(16), (chunkZ * 16) + rand.nextInt(16));
		}
	}
	
	private void generateWaterPortal(World world, Random rand, int x, int z)
	{
		if(world.getBiomeGenForCoords(x, z) == OuterPlanes.biomeOceanus && rand.nextInt(50) == 0)
		{
			boolean flag = true;
			int y = getTopBlockY(world, x, z);
			if(world.getBlock(x, y, z) == Blocks.water)
			{
				for(int i = -3; i <= 3; i++)
				{
					for(int k = -3; k <= 3; k++)
					{
						if(world.getBlock(x + i, y, z + k) != Blocks.water)
						{
							flag = false;
						}
					}
				}
								
				if(flag)
				{
					int minY = y - (rand.nextInt(23) + 1);
					System.out.println("generating portal @ " + x + ", " + minY + ", " + z);
					
					for(int j = y; j >= minY; j--)
					{
						for(int k = -2; k <= 2; k++)
						{
							for(int i = -2; i <= 2; i++)
							{
								world.setBlock(x + i, j, z + k, Blocks.stone, 0, 3);
							}
						}
					}
					for(int j = y; j >= minY; j--)
					{
						for(int k = -1; k <= 1; k++)
						{
							for(int i = -1; i <= 1; i++)
							{
								world.setBlock(x + i, j, z + k, Blocks.air, 0, 3);
							}
						}
					}
					for(int j = y; j >= minY; j--)
					{
						for(int k = -2; k <= 2; k++)
						{
							for(int i = -2; i <= 2; i++)
							{
								world.setBlock(x + i, j, z + k, Blocks.air, 0, 3);
							}
						}
					}
				}
			}
		}
	}
	
	/**
	 * returns the y coordinate of the highest block at the given x and z coordinates
	 * 
	 * @param world
	 * @param x
	 * @param z
	 * @return y
	 */
	private int getTopBlockY(World world, int x, int z)
	{
		int y = 256;
		
		while((!world.getBlock(x, y, z).getMaterial().blocksMovement() || (world.getBlock(x, y, z).getMaterial() == Material.leaves) || world.getBlock(x, y, z).isFoliage(world, x, y, z)) && !world.getBlock(x, y, z).getMaterial().isLiquid())
		{
			--y;
		}
		return y;
	}
}
